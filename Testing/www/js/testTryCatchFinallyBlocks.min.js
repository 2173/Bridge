"use strict";Bridge.define("ClientTestLibrary.Data",{config:{properties:{Count:0}}});Bridge.define("ClientTestLibrary.TestTryCatchFinallyBlocks",{statics:{config:{properties:{IsATry:!1,IsACatch:!1,IsAFinally:!1,IsBTry:!1,IsBCatch:!1,IsBFinally:!1,IsCTry:!1,IsCCatch:!1,IsCFinally:!1,IsDTry:!1,IsDCatch:!1,IsDFinally:!1}},simpleTryCatchFinally:function(assert){assert.expect(1);var data=new ClientTestLibrary.Data;Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).tryCatchFinally(data);assert.equal(data.getCount(),2,"TryCatchFinally() executes")},caughtExceptions:function(assert){var data,exceptionMessage;assert.expect(4);data=new ClientTestLibrary.Data;Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).tryCatchFinallyWithCaughtException(data);assert.equal(data.getCount(),7,"Exception catch, Finally works");data=new ClientTestLibrary.Data;Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).tryCatchFinallyWithCaughtTypedException(data);assert.equal(data.getCount(),7,"Typed exception catch, Finally works");data=new ClientTestLibrary.Data;exceptionMessage=Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).tryCatchFinallyWithCaughtArgumentException(data);assert.equal(exceptionMessage,"catch me","Typed exception catch with exception message");assert.equal(data.getCount(),7,"Typed exception catch with exception message, Finally works")},thrownExceptions:function(assert){assert.expect(16);assert.throws(Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).tryCatchFinallyWithNotCaughtTypedException,"catch me","A. Typed exception is not caught");assert.ok(Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).getIsATry(),"A. exception not caught - try section called");assert.ok(!Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).getIsACatch(),"A. exception not caught - catch section not called");assert.ok(Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).getIsAFinally(),"A. exception not caught - finally section called");assert.throws(Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).tryCatchWithNotCaughtTypedExceptionAndArgument,"catch me","[#229] B. Typed exception is not caught; and argument");assert.ok(Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).getIsBTry(),"B. exception not caught - try section called");assert.ok(!Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).getIsBCatch(),"B. exception not caught - catch section not called");assert.ok(Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).getIsBFinally(),"B. exception not caught - finally section called");assert.throws(Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).tryCatchWithRethrow,"catch me","[#231] C. Rethrow");assert.ok(Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).getIsCTry(),"C. exception caught and re-thrown  - try section called");assert.ok(Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).getIsCCatch(),"C. exception caught and re-thrown  - catch section called");assert.ok(Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).getIsCFinally(),"C. exception caught and re-thrown  - finally section called");assert.throws(Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).tryCatchWithRethrowEx,function(error){return error.toString()==="catch me"},"D. Rethrow with parameter");assert.ok(Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).getIsDTry(),"D. exception caught and re-thrown  - try section called");assert.ok(Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).getIsDCatch(),"D. exception caught and re-thrown  - catch section called");assert.ok(Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).getIsDFinally(),"D. exception caught and re-thrown  - finally section called")},tryCatchFinally:function(data){try{data.setCount(data.getCount()+1)}catch($e){$e=Bridge.Exception.create($e)}finally{data.setCount(data.getCount()+1)}},tryCatchFinallyWithCaughtException:function(data){try{data.setCount(data.getCount()+1);throw new Bridge.Exception;}catch($e){$e=Bridge.Exception.create($e);data.setCount(data.getCount()+2)}finally{data.setCount(data.getCount()+4)}},tryCatchFinallyWithCaughtTypedException:function(data){try{data.setCount(data.getCount()+1);throw new Bridge.Exception("catch me");}catch($e){$e=Bridge.Exception.create($e);data.setCount(data.getCount()+2)}finally{data.setCount(data.getCount()+4)}},tryCatchFinallyWithCaughtArgumentException:function(data){try{data.setCount(data.getCount()+1);throw new Bridge.ArgumentException("catch me");}catch($e){$e=Bridge.Exception.create($e);var ex;if(Bridge.is($e,Bridge.ArgumentException))return ex=$e,data.setCount(data.getCount()+2),ex.getMessage();throw $e;}finally{data.setCount(data.getCount()+4)}},tryCatchFinallyWithNotCaughtTypedException:function(){Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).setIsATry(!1);Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).setIsACatch(!1);Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).setIsAFinally(!1);try{Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).setIsATry(!0);throw new Bridge.Exception("catch me");}catch($e){if($e=Bridge.Exception.create($e),Bridge.is($e,Bridge.ArgumentException))Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).setIsACatch(!0);else throw $e;}finally{Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).setIsAFinally(!0)}},tryCatchWithNotCaughtTypedExceptionAndArgument:function(){var ex,s;Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).setIsBTry(!1);Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).setIsBCatch(!1);Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).setIsBFinally(!1);try{Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).setIsBTry(!0);throw new Bridge.Exception("catch me");}catch($e){if($e=Bridge.Exception.create($e),Bridge.is($e,Bridge.InvalidCastException))ex=$e,s=ex.getMessage(),Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).setIsBCatch(!0);else throw $e;}finally{Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).setIsBFinally(!0)}},tryCatchWithRethrow:function(){Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).setIsCTry(!1);Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).setIsCCatch(!1);Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).setIsCFinally(!1);try{Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).setIsCTry(!0);throw new Bridge.InvalidOperationException("catch me");}catch($e){$e=Bridge.Exception.create($e);Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).setIsCCatch(!0);throw $e;}finally{Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).setIsCFinally(!0)}},tryCatchWithRethrowEx:function(){Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).setIsDTry(!1);Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).setIsDCatch(!1);Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).setIsDFinally(!1);try{Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).setIsDTry(!0);throw new Bridge.ArgumentException("catch me");}catch(ex){ex=Bridge.Exception.create(ex);Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).setIsDCatch(!0);throw ex;}finally{Bridge.get(ClientTestLibrary.TestTryCatchFinallyBlocks).setIsDFinally(!0)}}}});Bridge.init();