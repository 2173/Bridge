"use strict";Bridge.define("ClientTestLibrary.Linq.TestLinqAggregateOperators",{statics:{test:function(assert){var oddNumbers,groupJoin,groupJoinExpected,grouped,groupedExpected,numSum,totalChars,groupedSum,groupedSumExpected,minNum,shortestWordLength,groupedMin,groupedMinExpected,groupedMinWithLet,groupedMinWithLetExpected,maxNum,longestWordLength,groupedMax,groupedMaxExpected,groupedMaxWithLet,groupedMaxWithLetExpected,averageNum,averageWordLengths,averageWordLength,groupedAverage,groupedAverageExpected,doublesForAggregate,product;assert.expect(20);var numbers=[2,2,3,5,5,-1,2,-1],words=["one","two","three"],uniqueNumbers=Bridge.Linq.Enumerable.from(numbers).distinct().count();assert.deepEqual(uniqueNumbers,4,"Count() distinct numbers");oddNumbers=Bridge.Linq.Enumerable.from(numbers).count(function(n){return n%2==1});assert.deepEqual(oddNumbers,3,"Count() odd numbers");groupJoin=Bridge.Linq.Enumerable.from(Bridge.get(ClientTestLibrary.Utilities.Group).getGroups()).groupJoin(Bridge.get(ClientTestLibrary.Utilities.Person).getPersons(),function(g){return g.getName()},function(p){return p.getGroup()},function(g,pg){return{group:g.getName(),personCount:Bridge.Linq.Enumerable.from(pg).count()}}).toArray();groupJoinExpected=[{group:"A",personCount:1},{group:"B",personCount:4},{group:"C",personCount:2},{group:"D",personCount:0}];assert.deepEqual(groupJoin,groupJoinExpected,"Count() within joint collections");grouped=Bridge.Linq.Enumerable.from(Bridge.get(ClientTestLibrary.Utilities.Person).getPersons()).groupBy(function(p){return p.getGroup()}).select(function(g){return{group:g.key(),personCount:g.count()}}).toArray();groupedExpected=[{group:"A",personCount:1},{group:"C",personCount:2},{group:"B",personCount:4},{group:Bridge.cast(null,String),personCount:1}];assert.deepEqual(grouped,groupedExpected,"Count() within group");numSum=Bridge.Linq.Enumerable.from(numbers).sum();assert.deepEqual(numSum,17,"Sum() numbers");totalChars=Bridge.Linq.Enumerable.from(words).sum(function(w){return w.length});assert.deepEqual(totalChars,11,"Sum() total chars");groupedSum=Bridge.Linq.Enumerable.from(Bridge.get(ClientTestLibrary.Utilities.Person).getPersons()).groupBy(function(p){return p.getGroup()}).select(function(g){return{group:g.key(),sum:g.sum(function(x){return x.getCount()})}}).toArray();groupedSumExpected=[{group:"A",sum:300},{group:"C",sum:600},{group:"B",sum:2e3},{group:Bridge.cast(null,String),sum:3e3}];assert.deepEqual(groupedSum,groupedSumExpected,"Sum() within group");minNum=Bridge.Linq.Enumerable.from(numbers).min();assert.deepEqual(minNum,-1,"Min() number");shortestWordLength=Bridge.Linq.Enumerable.from(words).min(function(w){return w.length});assert.deepEqual(shortestWordLength,3,"Min() for shortest word");groupedMin=Bridge.Linq.Enumerable.from(Bridge.get(ClientTestLibrary.Utilities.Person).getPersons()).groupBy(function(p){return p.getGroup()}).select(function(g){return{group:g.key(),min:g.min(function(x){return x.getCount()})}}).toArray();groupedMinExpected=[{group:"A",min:300},{group:"C",min:100},{group:"B",min:50},{group:Bridge.cast(null,String),min:3e3}];assert.deepEqual(groupedMin,groupedMinExpected,"Min() within group");groupedMinWithLet=Bridge.Linq.Enumerable.from(Bridge.get(ClientTestLibrary.Utilities.Person).getPersons()).groupBy(function(p){return p.getGroup()}).select(function(g){return{g:g,minCount:g.min(function(x){return x.getCount()})}}).select(function(x0){return{group:x0.g.key(),name:x0.g.where(function(x){return x.getCount()===x0.minCount}).select(function(x){return x.getName()}).toArray()}}).toArray();groupedMinWithLetExpected=[{group:"A",name:["Frank"]},{group:"C",name:["Zeppa"]},{group:"B",name:["Dora"]},{group:Bridge.cast(null,String),name:["Nemo"]}];assert.deepEqual(groupedMinWithLet,groupedMinWithLetExpected,"Min() within group with let");maxNum=Bridge.Linq.Enumerable.from(numbers).max();assert.deepEqual(maxNum,5,"Max() number");longestWordLength=Bridge.Linq.Enumerable.from(words).max(function(w){return w.length});assert.deepEqual(longestWordLength,5,"Max() for longest word");groupedMax=Bridge.Linq.Enumerable.from(Bridge.get(ClientTestLibrary.Utilities.Person).getPersons()).groupBy(function(p){return p.getGroup()}).select(function(g){return{group:g.key(),max:g.max(function(x){return x.getCount()})}}).toArray();groupedMaxExpected=[{group:"A",max:300},{group:"C",max:500},{group:"B",max:700},{group:Bridge.cast(null,String),max:3e3}];assert.deepEqual(groupedMax,groupedMaxExpected,"Max() within group");groupedMaxWithLet=Bridge.Linq.Enumerable.from(Bridge.get(ClientTestLibrary.Utilities.Person).getPersons()).groupBy(function(p){return p.getGroup()}).select(function(g){return{g:g,maxCount:g.max(function(x){return x.getCount()})}}).select(function(x1){return{group:x1.g.key(),name:x1.g.where(function(x){return x.getCount()===x1.maxCount}).select(function(x){return x.getName()}).toArray()}}).toArray();groupedMaxWithLetExpected=[{group:"A",name:["Frank"]},{group:"C",name:["Billy"]},{group:"B",name:["John","Mary"]},{group:Bridge.cast(null,String),name:["Nemo"]}];assert.deepEqual(groupedMaxWithLet,groupedMaxWithLetExpected,"Max() within group with let");averageNum=Bridge.Linq.Enumerable.from(numbers).average();assert.deepEqual(averageNum,2.125,"Average() number");averageWordLengths=["1","22","333","4444","55555"];averageWordLength=Bridge.Linq.Enumerable.from(averageWordLengths).average(function(w){return w.length});assert.deepEqual(averageWordLength,3,"Average() for word lengths");groupedAverage=Bridge.Linq.Enumerable.from(Bridge.get(ClientTestLibrary.Utilities.Person).getPersons()).groupBy(function(p){return p.getGroup()}).select(function(g){return{group:g.key(),average:g.average(function(x){return x.getCount()})}}).toArray();groupedAverageExpected=[{group:"A",average:300},{group:"C",average:300},{group:"B",average:500},{group:Bridge.cast(null,String),average:3e3}];assert.deepEqual(groupedAverage,groupedAverageExpected,"Average() within group");doublesForAggregate=[1,2,3,4,5];product=Bridge.Linq.Enumerable.from(doublesForAggregate).aggregate(function(runningProduct,nextFactor){return runningProduct*nextFactor});assert.deepEqual(product,120,"Aggregate() within doubles");var endBalance=Bridge.Linq.Enumerable.from([20,10,40,50,10,70,30]).aggregate(100,function(balance,nextWithdrawal){return nextWithdrawal<=balance?balance-nextWithdrawal:balance});assert.deepEqual(endBalance,20,"Aggregate() balance")},bridge315:function(assert){assert.expect(1);var q=Bridge.Linq.Enumerable.from("a,b,c,a".toUpperCase().split(",")).aggregate("",function(workingSentence,next){return next+" "+workingSentence});assert.equal(q,"A C B A ","Enumerable.Aggregate")}}});Bridge.init();