"use strict";Bridge.define("ClientTestLibrary.TestTryCatchBlocks",{statics:{config:{properties:{IsATry:!1,IsACatch:!1,IsBTry:!1,IsBCatch:!1,IsCTry:!1,IsCCatch:!1,IsDTry:!1,IsDCatch:!1}},simpleTryCatch:function(assert){assert.expect(1);var result=Bridge.get(ClientTestLibrary.TestTryCatchBlocks).tryCatch("Good");assert.equal(result,"Good","TryCatch() executes")},caughtExceptions:function(assert){assert.expect(3);Bridge.get(ClientTestLibrary.TestTryCatchBlocks).tryCatchWithCaughtException();assert.ok(!0,"Exception catch");Bridge.get(ClientTestLibrary.TestTryCatchBlocks).tryCatchWithCaughtTypedException();assert.ok(!0,"Typed exception catch");var exceptionMessage=Bridge.get(ClientTestLibrary.TestTryCatchBlocks).tryCatchWithCaughtArgumentException();assert.deepEqual(exceptionMessage,"catch me","Typed exception catch with exception message")},thrownExceptions:function(assert){assert.expect(12);assert.throws(Bridge.get(ClientTestLibrary.TestTryCatchBlocks).tryCatchWithNotCaughtTypedException,"catch me","A.Typed exception is not Caught");assert.ok(Bridge.get(ClientTestLibrary.TestTryCatchBlocks).getIsATry(),"A. exception not caught - try section called");assert.ok(!Bridge.get(ClientTestLibrary.TestTryCatchBlocks).getIsACatch(),"A. exception not caught - catch section not called");assert.throws(Bridge.get(ClientTestLibrary.TestTryCatchBlocks).tryCatchWithNotCaughtTypedExceptionAndArgument,"catch me","[#229] B. Typed exception is not Caught; and argument");assert.ok(Bridge.get(ClientTestLibrary.TestTryCatchBlocks).getIsBTry(),"[#229] B. exception not caught - try section called");assert.ok(!Bridge.get(ClientTestLibrary.TestTryCatchBlocks).getIsBCatch(),"B. exception not caught - catch section not called");assert.throws(Bridge.get(ClientTestLibrary.TestTryCatchBlocks).tryCatchWithRethrow,"catch me","[#231] C. Rethrow");assert.ok(Bridge.get(ClientTestLibrary.TestTryCatchBlocks).getIsCTry(),"C. exception caught and re-thrown - try section called");assert.ok(Bridge.get(ClientTestLibrary.TestTryCatchBlocks).getIsCCatch(),"C. exception caught and re-thrown - catch section called");assert.throws(Bridge.get(ClientTestLibrary.TestTryCatchBlocks).tryCatchWithRethrowEx,function(error){return error.toString()==="catch me"},"D. Rethrow with parameter");assert.ok(Bridge.get(ClientTestLibrary.TestTryCatchBlocks).getIsDTry(),"D. exception caught and re-thrown  - try section called");assert.ok(Bridge.get(ClientTestLibrary.TestTryCatchBlocks).getIsDCatch(),"D. exception caught and re-thrown  - catch section called")},bridge320:function(assert){assert.expect(1);var exceptionMessage="";try{"someString".SomeNotExistingMethod()}catch(ex){ex=Bridge.Exception.create(ex);exceptionMessage=ex.getMessage()}assert.ok(Bridge.String.contains(exceptionMessage,"SomeNotExistingMethod"),"ex.Message works on built-in JavaScript type")},bridge343:function(assert){var exceptionMessage,i,r,ex;assert.expect(1);exceptionMessage="";i=0;try{r=Bridge.Int.div(10,i)}catch($e){$e=Bridge.Exception.create($e);Bridge.is($e,Bridge.ArgumentException)||(ex=$e,exceptionMessage=ex.getMessage())}assert.ok(!Bridge.String.isNullOrEmpty(exceptionMessage),"Double catch block with general Exception works")},tryCatch:function(s){try{return s}catch($e){return $e=Bridge.Exception.create($e),""}},tryCatchWithCaughtException:function(){try{throw new Bridge.Exception;}catch($e){$e=Bridge.Exception.create($e)}},tryCatchWithCaughtTypedException:function(){try{throw new Bridge.Exception;}catch($e){$e=Bridge.Exception.create($e)}},tryCatchWithCaughtArgumentException:function(){try{throw new Bridge.ArgumentException("catch me");}catch($e){$e=Bridge.Exception.create($e);var ex;if(Bridge.is($e,Bridge.ArgumentException))return ex=$e,ex.getMessage();throw $e;}},tryCatchWithNotCaughtTypedException:function(){Bridge.get(ClientTestLibrary.TestTryCatchBlocks).setIsATry(!1);Bridge.get(ClientTestLibrary.TestTryCatchBlocks).setIsACatch(!1);try{Bridge.get(ClientTestLibrary.TestTryCatchBlocks).setIsATry(!0);throw new Bridge.Exception("catch me");}catch($e){if($e=Bridge.Exception.create($e),Bridge.is($e,Bridge.ArgumentException))Bridge.get(ClientTestLibrary.TestTryCatchBlocks).setIsATry(!0);else throw $e;}Bridge.get(ClientTestLibrary.TestTryCatchBlocks).setIsATry(!1)},tryCatchWithNotCaughtTypedExceptionAndArgument:function(){var ex,s;Bridge.get(ClientTestLibrary.TestTryCatchBlocks).setIsBTry(!1);Bridge.get(ClientTestLibrary.TestTryCatchBlocks).setIsBCatch(!1);try{Bridge.get(ClientTestLibrary.TestTryCatchBlocks).setIsBTry(!0);throw new Bridge.Exception("catch me");}catch($e){if($e=Bridge.Exception.create($e),Bridge.is($e,Bridge.InvalidCastException))ex=$e,Bridge.get(ClientTestLibrary.TestTryCatchBlocks).setIsBCatch(!0),s=ex.getMessage();else throw $e;}Bridge.get(ClientTestLibrary.TestTryCatchBlocks).setIsBTry(!1)},tryCatchWithRethrow:function(){Bridge.get(ClientTestLibrary.TestTryCatchBlocks).setIsCTry(!1);Bridge.get(ClientTestLibrary.TestTryCatchBlocks).setIsCCatch(!1);try{Bridge.get(ClientTestLibrary.TestTryCatchBlocks).setIsCTry(!0);throw new Bridge.InvalidOperationException("catch me");}catch($e){$e=Bridge.Exception.create($e);Bridge.get(ClientTestLibrary.TestTryCatchBlocks).setIsCCatch(!0);throw $e;}Bridge.get(ClientTestLibrary.TestTryCatchBlocks).setIsCTry(!1)},tryCatchWithRethrowEx:function(){Bridge.get(ClientTestLibrary.TestTryCatchBlocks).setIsDTry(!1);Bridge.get(ClientTestLibrary.TestTryCatchBlocks).setIsDCatch(!1);try{Bridge.get(ClientTestLibrary.TestTryCatchBlocks).setIsDTry(!0);throw new Bridge.ArgumentException("catch me");}catch(ex){ex=Bridge.Exception.create(ex);Bridge.get(ClientTestLibrary.TestTryCatchBlocks).setIsDCatch(!0);throw ex;}Bridge.get(ClientTestLibrary.TestTryCatchBlocks).setIsDTry(!1)}}});Bridge.init();