"use strict";Bridge.define("ClientTestLibrary.Linq.TestLinqQuantifiers",{statics:{test:function(assert){var words,anyOu,oddNumbers,onlyOdd,someNumbers,notOnlyOdd,productGroups,productGroupsExpected;assert.expect(4);words=["count","tree","mount","five","doubt"];anyOu=Bridge.Linq.Enumerable.from(words).any(function(w){return Bridge.String.contains(w,"ou")});assert.ok(anyOu,"Any() to return words containing 'ou'");oddNumbers=[3,7,9,5,247,1000001];onlyOdd=Bridge.Linq.Enumerable.from(oddNumbers).all(function(n){return n%2==1});assert.ok(onlyOdd,"All() is odd");someNumbers=[2,3,7,9,5,247,1000001];notOnlyOdd=!Bridge.Linq.Enumerable.from(someNumbers).all(function(n){return n%2==1});assert.ok(notOnlyOdd,"All() is not only odd");productGroups=Bridge.Linq.Enumerable.from(Bridge.get(ClientTestLibrary.Utilities.Person).getPersons()).groupBy(function(p){return p.getGroup()}).where(function(pGroup){return pGroup.any(function(p){return p.getCount()>=500})}).select(function(pGroup){return{group:pGroup.key(),names:pGroup.select(function(x){return x.getName()}).toArray()}}).toArray();productGroupsExpected=[{group:"C",names:["Zeppa","Billy"]},{group:"B",names:["John","Dora","Ian","Mary"]},{group:Bridge.cast(null,String),names:["Nemo"]}];assert.deepEqual(productGroups,productGroupsExpected,"Any() to return a grouped array of names only for groups having any item with Count > 500")}}});Bridge.init();